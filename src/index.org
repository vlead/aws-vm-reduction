#+Title: Experiments as a service
#+Date: Friday, December 23, 2016 
#+Author: VLEAD 
#+SETUPFILE: ./org-templates/level-1.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  + This will contain the documentation related to the activities for 
    experiment as a service. 
  + Lab/Experiments which do not have server-side dependencies can be hosted 
    and served from a single machine. 

  [[./images/clubbing-experiments.jpg]]

* Criteria for clubbing labs in one VM
  + Lab must have any of the folling dependencies -
    Dependency_set = { HTML, CSS, JS, ActionScript }
    Any subset of Dependencey_set can be clubbed together. 

* Working Approach 
  The concept of deploy container is used to host multiple labs from a sinle
  VM/machine. Following are the steps to be followed -
** Steps 
  + Identify a lab having none/minimal server side dependency 
  + Deploy a Experiment server in the cluster
  + Set Directory root to /var/www/ or /var/www/html/
  + Copy the sources of lab to DirectoryRoot inside a folder with name
    as its lab id.
  + Modify the reverse proxy entries to point to experiment server.
** POC  local machine
  + Install apache web server in local machine.
  + Set DirectoryRoot to /var/www/html 
  + Take two labs and copy the sources to /var/www/html/<labName> 
  + Configure VirtualHost file for apache
    #+BEGIN_SRC config
    <VirtualHost *:80>
ServerAdmin ashay@vlabs.ac.in
DocumentRoot /var/www/html/ds-iiith
ServerName ds-iiith.local.ac.in
ServerAlias www.ds-iiith.local.ac.in
#ErrorLog /var/log/logs/ds-iiith.local.ac.in
#CustomLog /var/log/logs/ds-iiith.local.ac.in c
</VirtualHost>

<VirtualHost *:80>
ServerAdmin ashay@vlabs.ac.in
DocumentRoot /var/www/html/mas-iiith
ServerName mas-iiith.local.ac.in
ServerAlias www.mas-iiith.local.ac.in
#ErrorLog /var/log/logs/ds-iiith.local.ac.in
#CustomLog /var/log/logs/ds-iiith.local.ac.in c
</VirtualHost>
    #+END_SRC
  + Config /etc/hosts file to give local names to lab
    #+BEGIN_SRC config
    vim /etc/hosts
127.0.0.1       localhost vlead-H81M-S
127.0.1.1       vlead-H81M-S

127.0.0.1       ds-iiith.local.ac.in
127.0.0.1       mas-iiith.local.ac.in
    
    #+END_SRC
  + Try accessing lab using local urls
  + All assets and experiments were found to be accessible and functioning.
* Approach A

** Steps
  + Identify the labs whose experiments are to be clubbed togther.
  + Deploy a =experiment server=, which will contain the clubbed
    experiments.
  + Copy the source code of =lab1= in =experiment server= such that
    sources are at /var/www/html/lab1/
  + Copy the source code of =lab2= in =experiment server= such that
    sources are at /var/www/html/lab2/
  + Visit the lab and then specific experiments, identify the file
    serving the Simulation (say Simulation.html)
  + Say experiment is served at URL http://lab1/exp1/Simulation.html and http://lab2/exp1/Simulation.html
  + Try to access the same experiment from experiment server (say
    http://experiment-server/lab1/exp1/Simulation.html)
  + Similiarly, try to access ( say
    http://experiment-server/lab2/exp1/Simulation.html)
  + Make changes in reverse-proxy server to redirect
    http://lab1/exp1/Simulation.html to
    http://experiment-server/lab1/Simulation.html

** Challenges/Issues 
  + Lab sources with relative and absolute paths are to be checked for
    link integrity. Change in DicrectoryRoot will make assets like
    images, js, css unaccessble and hence will not load.
  + Adding entries in Reverse proxy server to redirect old urls to new
    urls need multiple rules for file to file redirection.
  + This idea can add multiple redirection rules in Revere proxy
    server which will be difficult to manage and also cannot be
    ensured to be bug free.


* Approach B

** Strategy 
   + Identify  =labs= to be clubbed together. 
   + Pick single lab and visit each experiment of the lab and using
     inspect element, identify the files serving the experiment. For
     example, say there is a lab http://lab1.vlabs.ac.in . Identify
     the files which are serving experiments and identify the assets
     related to that experiment.
   + Check for asolute and relative URLs in the lab sources. When
     multiple lab sources are to be clubbed together, DirectoryRoot
     will change. Hence hard coded URLs absolute and relative
     (specially absolute) will not be accessing to the right asset
     they need to.
   + Every access using absolute and relative URL must be fixed in
     terms of the DirectoryRoot of experiment server.
   + Automated tool like grunt can help in identifying errors for
     unaccessible links/files
   + After fixing the issues Lab wise/experiment wise, document the
     steps which are required to repeat the same procedure for other
     labs as well.
   + After identifying the right process can be automated using scripts.
  

** Challenges 
   + Hardcoded links (absolute and relative) to files must be
     identified and fixed so that experiments point to right assets. 
   + The above can be automated once the manual general steps are
     idenfied and ensured to be working.
   
** How experiments will look in Experiment server ?
   + Even though experiments are forming experiment server, the
     experiment server will still contain complete lab sources in it.
   + Assuming the =DirectoryRoot as /var/www/html/=, sources of lab will be placed as shown 
     #+BEGIN_SRC command
     lab1 sources - /var/www/html/lab1/
     lab2 sources - /var/www/html/lab2/
     labN sources - /var/www/html/labN/
     #+END_SRC
   + Files serving Simulations/Experiments will be served from the
     directory structure as above.

   

   

* Approach C
  Using the concept of deploy containers.
  + Deploy a experiment server and install apache
  + Copy the build sources in /var/www/html in experiment server
  + Sources must be copied in folders for each lab in DocumentRoot - 
    /var/www/html/lab1 ... /var/www/html/labN
  + Configure Virtual host config in Apache
  + Access lab 

** What is to be done ?
  + Identify labs with server side dependencies
  + Copy the sources and configure reverse proxy 
